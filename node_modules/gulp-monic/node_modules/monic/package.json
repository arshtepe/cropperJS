{
  "name": "monic",
  "description": "File builder for JavaScript.",
  "version": "1.1.8",
  "homepage": "https://github.com/kobezzza/Monic",
  "author": {
    "name": "kobezzza",
    "email": "kobezzza@mail.ru",
    "url": "https://github.com/kobezzza"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kobezzza/Monic.git"
  },
  "bugs": {
    "url": "https://github.com/kobezzza/Monic/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/kobezzza/Monic/blob/master/LICENSE"
    }
  ],
  "main": "monic.js",
  "bin": {
    "monic": "bin/monic.js"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "scripts": {
    "test": "node test",
    "test-travis": "istanbul cover test"
  },
  "dependencies": {
    "async": "^0.9.0",
    "commander": "^2.5.0",
    "glob": "^4.0.6"
  },
  "keywords": [
    "filebuilder",
    "include"
  ],
  "devDependencies": {
    "coveralls": "^2.11.2",
    "gulp": "^3.8.9",
    "gulp-6to5": "^2.0.0",
    "gulp-bump": "^0.1.11",
    "gulp-eol": "^0.1.1",
    "gulp-run": "^1.6.5",
    "istanbul": "^0.3.5",
    "yaspeller": "^0.7.2"
  },
  "readme": "# Monic\r\n\r\nMonic — сборщик JS-файлов ([форк Jossy](https://github.com/Kolyaj/Jossy)) в один или несколько модулей.\r\nПри правильном использовании позволяет не только легко собирать модули,\r\nно и также легко пересобирать их при изменении принципов сборки.\r\n\r\n[![NPM version](http://img.shields.io/npm/v/monic.svg?style=flat)](http://badge.fury.io/js/monic)\r\n[![NPM dependencies](http://img.shields.io/david/kobezzza/Monic.svg?style=flat)](https://david-dm.org/kobezzza/Monic#info=dependencies&view=table)\r\n[![NPM devDependencies](http://img.shields.io/david/dev/kobezzza/Monic.svg?style=flat)](https://david-dm.org/kobezzza/Monic#info=devDependencies&view=table)\r\n[![Build Status](http://img.shields.io/travis/kobezzza/Monic.svg?style=flat&branch=master)](https://travis-ci.org/kobezzza/Monic)\r\n[![Coverage Status](http://img.shields.io/coveralls/kobezzza/Monic.svg?style=flat)](https://coveralls.io/r/kobezzza/Monic?branch=master)\r\n\r\n## Использование\r\n### Сборка из командной строки\r\n#### Установка\r\n\r\n```bash\r\nnpm install monic --global\r\n```\r\n\r\n#### Использование\r\n\r\n```bash\r\nmonic [options] [file ...]\r\n```\r\n\r\n##### options\r\n\r\n```bash\r\n-h, --help               вывод справки\r\n-V, --version            вывод версии Monic\r\n\r\n-f, --file [src]         путь к файлу (метаинформация)\r\n\r\n--line-separator         символ новой строки (\\n, \\r или \\r\\n)\r\n--flags [list]           список флагов через запятую\r\n--labels [list]          список меток через запятую\r\n```\r\n\r\n##### Дополнение\r\n\r\nРезультат сборки выводится в output, поэтому для сохранения в файл нужно использовать возможности командной оболочки, например,\r\n\r\n```bash\r\nmonic file.js --flags ie --labels escapeHTML > _file.js\r\n```\r\n\r\n#### Примеры\r\n\r\n**Сборка файла с выводом результата в консоль**\r\n\r\n```bash\r\nmonic myFile.js\r\n```\r\n\r\n**Сборка текста с выводом результата в консоль**\r\n\r\n```bash\r\nmonic '//#include foo/*.js' -f myFile.js\r\n```\r\n\r\nИли поверх `stdio`\r\n\r\n```bash\r\necho '//#include foo/*.js' | monic -f myFile.js\r\n```\r\n\r\n### Плагины\r\n\r\n* [Gulp](https://github.com/kobezzza/gulp-monic)\r\n* [Grunt](https://github.com/kobezzza/grunt-monic)\r\n\r\n### Использование сборщика из NodeJS\r\n\r\n```js\r\nvar monic = require('monic');\r\nmonic.compile(\r\n\t'myFile.js',\r\n\r\n\t{\r\n\t\t// Символ перевода строки (опционально, по умолчанию \\n)\r\n\t\tlineSeparator: '\\r\\n',\r\n\r\n\t\t// Таблица задаваемых меток (опционально)\r\n\t\tlabels: {\r\n\t\t\tescapeHTML: true\r\n\t\t},\r\n\r\n\t\t// Таблица задаваемых флагов (опционально)\r\n\t\tflags: {\r\n\t\t\tie: true\r\n\t\t}\r\n\t},\r\n\r\n\tfunction (err, result) {\r\n\t\tif (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\r\n\t\tconsole.log(result);\r\n\t}\r\n);\r\n```\r\n\r\n### Явное указание текста файла\r\n\r\n```js\r\nvar monic = require('monic');\r\nmonic.compile(\r\n\t'myFile.js',\r\n\r\n\t{\r\n\t\tcontent: '...'\r\n\t},\r\n\r\n\tfunction (err, result) {\r\n\t\t...\r\n\t}\r\n);\r\n```\r\n\r\n### Задание функций предварительной обработки\r\n\r\n```js\r\nvar monic = require('monic');\r\nmonic.compile(\r\n\t'myFile.js',\r\n\r\n\t{\r\n\t\treplacers: [\r\n\t\t\t// Замена require конструкций на #include\r\n\t\t\tfunction (text, file) {\r\n\t\t\t\treturn text.replace(/^\\s*require\\('(.*?)'\\);/gm, '//#include $1');\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\r\n\tfunction (err, result) {\r\n\t\t...\r\n\t}\r\n);\r\n```\r\n\r\n## Синтаксис и возможности\r\n### Подключение файлов\r\n\r\nВключить содержимое внешнего файла в текущий можно директивой `#include ...`.\r\n\r\n```js\r\n//#include file.js\r\n```\r\n\r\nПуть к файлу указывается относительно расположения текущего файла или в абсолютной форме.\r\nТехнически, вместо строки с директивой просто вставляется содержимое указанного файла.\r\nОднако, если указанный файл уже подключен в текущем модуле ранее, то повторно он включен не будет. Например,\r\n\r\n```js\r\nalert(1);\r\n```\r\n\r\nФайл f2.js\r\n\r\n```js\r\n//#include f1.js\r\nalert(2);\r\n```\r\n\r\nИ файл f3.js\r\n\r\n```js\r\n//#include f1.js\r\n//#include f2.js\r\n```\r\n\r\nЕсли указать Monic файл f3.js, то на выходе будет:\r\n\r\n```js\r\nalert(1);\r\nalert(2);\r\n```\r\n\r\nВ пути к файлу можно также использовать [шаблоны](https://github.com/isaacs/node-glob).\r\n\r\n```js\r\n//#include lib/*.js\r\n```\r\n\r\n### Исключение файлов из сборки\r\n\r\nДиректива `#without` указывает Monic исключить из сборки все файлы, которые используются в указанном (включая указанный, разумеется).\r\n\r\n**Пример**\r\n\r\nВ проекте есть несколько десятков виджетов. Код каждого виджета лежит в отдельном файле.\r\nВ каждом виджете указаны его зависимости с помощью директивы `#include`.\r\nКакие-то виджеты используются на большинстве страниц, и при сборке логично их код вынести в отдельный файл *common.js*.\r\nВыбираем часто используемые виджеты, создаём файл common.js и пишем туда:\r\n\r\n```js\r\n//#include widget1.js\r\n//#include widget2.js\r\n//#include widget3.js\r\n```\r\n\r\nНа одной из страниц используется виджет, достаточно объёмный, чтобы не включать его в common.js,\r\nназовём его *big-widget*. В файле big-widget.js указаны его зависимости, среди которых,\r\nразумеется, много тех, которые уже есть в common.js. Если мы просто соберём файл big-widget.js,\r\nто получим много продублированного кода. Поэтому рядом с common.js создаём файл feature.js с содержимым:\r\n\r\n```js\r\n//#without common.js\r\n//#include big-widget.js\r\n```\r\n\r\nТеперь код, попавший в common.js, не попадёт в feature.js.\r\nГлавное не забыть подключить на страницу не только feature.js, но и common.js.\r\n\r\nФормат пути в директиве такой же, как и в `#include`.\r\n\r\n### Условная сборка\r\n\r\nВ процессе сборки можно определять булевые флаги, в зависимости от которых выводить или не выводить строки кода.\r\n\r\n```js\r\n//#set flag\r\n\r\n//#if flag\r\nalert('flag');\r\n//#endif\r\n\r\n//#if not flag\r\nalert('not flag');\r\n//#endif\r\n\r\n//#unset flag\r\n```\r\n\r\nФлаги глобальные. Указать их можно не только в коде директивами `#set` и `#unset`, но при запуске сборщика (о запуске сборщика ниже).\r\n\r\nНапример, файл file.js\r\n\r\n```js\r\n//#if ie\r\nalert('IE only');\r\n//#endif\r\n```\r\n\r\nФайл common.js\r\n\r\n```js\r\n//#include file.js\r\n```\r\n\r\nИ файл common-ie.js\r\n\r\n```js\r\n//#set ie\r\n//#include file.js\r\n```\r\n\r\nТочно также можно создать флаг debug и писать отладочные строки только внутри `//#if debug ... //#endif`,\r\nтогда отладочный код никогда не попадёт на боевые сервера.\r\n\r\n### Подключение кусков файлов\r\n\r\nЭта функциональность очень полезна полезна при разработке библиотек и фреймворков.\r\nНапример, в нашей библиотеке есть файл String.js, содержащий несколько десятков функций для работы со строками.\r\nВыделять каждую функцию в отдельный файл как-то неправильно, но и подключать потом несколько сотен строк кода ради одной функции тоже не хочется. В случае с Monic файл String.js размечается на области.\r\nИмена у областей могут быть произвольными, но лучше, чтобы они совпадали с именами функций.\r\n\r\n```js\r\nvar String = {};\r\n\r\n//#label truncate\r\nString.truncate = function () {\r\n\r\n};\r\n//#endlabel truncate\r\n\r\n//#label escapeHTML\r\nString.escapeHTML = function () {\r\n\r\n};\r\n//#endlabel escapeHTML\r\n```\r\n\r\nТеперь, если нам нужна только функция `escapeHTML`, то при подключении файла String.js пишем\r\n\r\n```js\r\n//#include String.js::escapeHTML\r\n```\r\n\r\nВ результате в сборку попадёт только\r\n\r\n```js\r\nvar String = {};\r\n\r\nString.escapeHTML = function () {\r\n\r\n};\r\n```\r\n\r\nЕсли нужно подключить несколько областей, указываем несколько\r\n\r\n```js\r\n//#include String.js::trim::truncate\r\n```\r\n\r\nЕсли нужно подключить всё, кроме размеченных областей (например, нам нужен только namespace String), то\r\n\r\n```js\r\n//#include String.js::\r\n```\r\n\r\nЕсли же какой-то области необходима другая область из текущего файла, то используем `#include` без указания файла.\r\n\r\n```js\r\n//#label truncate\r\n//#include ::trim\r\nString.truncate = function () {};\r\n//#endlabel truncate\r\n```\r\n\r\nОбратите внимание, что размеченные таким образом области файла в собранном коде могут поменять порядок и\r\nмежду ними может появиться другой код.\r\n\r\nНапример,\r\n\r\n```js\r\n//#include String.js::escapeHTML\r\nalert(1);\r\n//#include String.js::truncate\r\n```\r\n\r\nПосле сборки получим\r\n\r\n```js\r\nvar String = {};\r\n\r\nString.escapeHTML = function () {\r\n\r\n};\r\n\r\nalert(1);\r\n\r\nString.truncate = function () {\r\n\r\n};\r\n```\r\n\r\nПоэтому использовать `#label` внутри функций и выражений нельзя, на выходе получим поломанный JavaScript.\r\n\r\nКроме этого, `#without` тоже смотрит на эти области. Поэтому, например, `escapeHTML` может попасть в common.js,\r\nа `truncate` — в feature.js.\r\n\r\n## [Лицензия](https://github.com/kobezzza/Monic/blob/master/LICENSE)\r\n\r\nThe MIT License.\r\n",
  "readmeFilename": "README.md",
  "_id": "monic@1.1.8",
  "_from": "monic@>=1.0.0 <2.0.0"
}
